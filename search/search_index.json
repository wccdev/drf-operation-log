{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"drf-operation-log \u00b6 Documentation \u00b6 Requirement \u00b6 Python 3.8, 3.9, 3.10 Django 3.2, 4.0, 4.1 Installation \u00b6 Install using pip... pip install drf-operation-log Add 'drf_operation_log' to your INSTALLED_APPS setting. INSTALLED_APPS = [ 'django.contrib.admin' , ... 'drf_operation_log' , ] Let's take a look at a quick start of using drf_operation_log to saving operation logs. Run the drf_operation_log migrations using: python manage.py migrate drf_operation_log Add the following to your settings.py module: INSTALLED_APPS = [ 'django.contrib.admin' , ... 'drf_operation_log' , ] DRF_OPERATION_LOG_SAVE_DATABASE = True","title":"Home"},{"location":"#drf-operation-log","text":"","title":"drf-operation-log"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#requirement","text":"Python 3.8, 3.9, 3.10 Django 3.2, 4.0, 4.1","title":"Requirement"},{"location":"#installation","text":"Install using pip... pip install drf-operation-log Add 'drf_operation_log' to your INSTALLED_APPS setting. INSTALLED_APPS = [ 'django.contrib.admin' , ... 'drf_operation_log' , ] Let's take a look at a quick start of using drf_operation_log to saving operation logs. Run the drf_operation_log migrations using: python manage.py migrate drf_operation_log Add the following to your settings.py module: INSTALLED_APPS = [ 'django.contrib.admin' , ... 'drf_operation_log' , ] DRF_OPERATION_LOG_SAVE_DATABASE = True","title":"Installation"},{"location":"api/","text":"OperationLogEntry \u00b6 Bases: models . Model Source code in drf_operation_log/models.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 class OperationLogEntry ( models . Model ): action_time = models . DateTimeField ( _ ( \"\u64cd\u4f5c\u65f6\u95f4\" ), default = timezone . now , db_index = True , editable = False , ) user = models . ForeignKey ( settings . AUTH_USER_MODEL , models . CASCADE , verbose_name = _ ( \"\u7528\u6237\" ), ) content_type = models . ForeignKey ( ContentType , models . SET_NULL , verbose_name = _ ( \"\u64cd\u4f5c\u5bf9\u8c61\" ), related_name = \"+\" , blank = True , null = True , ) object_id = models . TextField ( _ ( \"\u5bf9\u8c61ID\" ), blank = True , null = True ) object_repr = models . CharField ( _ ( \"\u64cd\u4f5c\u5bf9\u8c61\" ), max_length = 128 ) domain_content_type = models . ForeignKey ( ContentType , models . SET_NULL , verbose_name = _ ( \"\u540c\u8303\u56f4\u64cd\u4f5c\u5bf9\u8c61\" ), related_name = \"+\" , blank = True , null = True , ) domain_object_id = models . TextField ( _ ( \"\u540c\u8303\u56f4\u5bf9\u8c61ID\" ), blank = True , null = True ) action = models . CharField ( _ ( \"\u52a8\u4f5c\" ), max_length = 32 ) action_name = models . CharField ( _ ( \"\u52a8\u4f5c\u540d\u79f0\" ), max_length = 32 ) action_flag = models . PositiveSmallIntegerField ( _ ( \"\u64cd\u4f5c\u7c7b\u578b\" ), choices = ACTION_FLAG_CHOICES ) change_message = models . JSONField ( _ ( \"\u5dee\u5f02\u4fe1\u606f\" ), blank = True , default = dict , encoder = JSONEncoder ) extra = models . JSONField ( _ ( \"\u5176\u4ed6\u4fe1\u606f\" ), blank = True , null = True ) objects = OperationLogEntryManager () class Meta : verbose_name = verbose_name_plural = _ ( \"\u64cd\u4f5c\u65e5\u5fd7\" ) db_table = \"drf_operation_log\" ordering = [ \"-action_time\" ] index_together = ( \"content_type\" , \"object_id\" ) def __repr__ ( self ): return str ( self . action_time ) def __str__ ( self ): if self . is_addition (): return gettext ( \"\u65b0\u589e \u201c %(object)s \u201d.\" ) % { \"object\" : self . object_repr } elif self . is_change (): return gettext ( \"\u4fee\u6539 \u201c %(object)s \u201d \u2014 %(changes)s \" ) % { \"object\" : self . object_repr , \"changes\" : self . get_change_message (), } elif self . is_deletion (): return gettext ( \"\u5220\u9664 \u201c %(object)s .\u201d\" ) % { \"object\" : self . object_repr } return gettext ( \"LogEntry Object\" ) def is_addition ( self ): return self . action_flag == ADDITION def is_change ( self ): return self . action_flag == CHANGE def is_deletion ( self ): return self . action_flag == DELETION def get_change_message ( self ): \"\"\" If self.change_message is a JSON structure, interpret it as a change string, properly translated. \"\"\" # if self.is_addition(): # return [f\"\u65b0\u589e {self.object_repr}\"] # elif self.is_deletion(): # return [f\"\u5220\u9664 {self.object_repr}\"] # elif not self.change_message: # return [\"\u672a\u66f4\u6539\"] # ret = [] # for field_name, (old_value, new_value) in self.change_message.items(): # old_value = \"\" if old_value is None else old_value # new_value = \"\" if new_value is None else new_value # message = f\"\u4fee\u6539 {field_name}\uff0c \u65e7\u503c\u201c{old_value}\u201d\uff0c\u65b0\u503c\u201c{new_value}\u201d\" # ret.append(message) return self . change_message def get_edited_object ( self ): \"\"\"Return the edited object represented by this log entry.\"\"\" return self . content_type . get_object_for_this_type ( pk = self . object_id ) def get_operation_url ( self ): \"\"\" Return the admin URL to edit the object represented by this log entry. \"\"\" if self . content_type and self . object_id : url_name = \"operationlogs-list\" try : url = reverse ( url_name ) return ( f \" { url } ?content_type= { self . content_type . pk } \" \"&object_id= {self.object_id} \" ) except NoReverseMatch : pass return None get_change_message () \u00b6 If self.change_message is a JSON structure, interpret it as a change string, properly translated. Source code in drf_operation_log/models.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def get_change_message ( self ): \"\"\" If self.change_message is a JSON structure, interpret it as a change string, properly translated. \"\"\" # if self.is_addition(): # return [f\"\u65b0\u589e {self.object_repr}\"] # elif self.is_deletion(): # return [f\"\u5220\u9664 {self.object_repr}\"] # elif not self.change_message: # return [\"\u672a\u66f4\u6539\"] # ret = [] # for field_name, (old_value, new_value) in self.change_message.items(): # old_value = \"\" if old_value is None else old_value # new_value = \"\" if new_value is None else new_value # message = f\"\u4fee\u6539 {field_name}\uff0c \u65e7\u503c\u201c{old_value}\u201d\uff0c\u65b0\u503c\u201c{new_value}\u201d\" # ret.append(message) return self . change_message get_edited_object () \u00b6 Return the edited object represented by this log entry. Source code in drf_operation_log/models.py 146 147 148 def get_edited_object ( self ): \"\"\"Return the edited object represented by this log entry.\"\"\" return self . content_type . get_object_for_this_type ( pk = self . object_id ) get_operation_url () \u00b6 Return the admin URL to edit the object represented by this log entry. Source code in drf_operation_log/models.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def get_operation_url ( self ): \"\"\" Return the admin URL to edit the object represented by this log entry. \"\"\" if self . content_type and self . object_id : url_name = \"operationlogs-list\" try : url = reverse ( url_name ) return ( f \" { url } ?content_type= { self . content_type . pk } \" \"&object_id= {self.object_id} \" ) except NoReverseMatch : pass return None OperationLogMixin \u00b6 DRF \u64cd\u4f5c\u65e5\u5fd7Mixin \u5fc5\u987b\u540c\u65f6\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u8981\u6c42\u7684\u64cd\u4f5c\u624d\u4f1a\u8bb0\u5f55 1. \u5199\u64cd\u4f5c(POST, PUT, PATCH, DELETE) 2. \u672a\u88ab\u5305\u542b\u5728 operationlog_action_exclude \u4e2d\u7684action 3. action \u4e3a create, update, partial_update \u6216 destroy \u81ea\u5b9a\u4e49action\u9700\u8981\u81ea\u5df1\u521b\u5efaoperation_log Source code in drf_operation_log/mixins.pyclass OperationLogMixin : \"\"\" DRF \u64cd\u4f5c\u65e5\u5fd7Mixin \u5fc5\u987b\u540c\u65f6\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u8981\u6c42\u7684\u64cd\u4f5c\u624d\u4f1a\u8bb0\u5f55 1. \u5199\u64cd\u4f5c(POST, PUT, PATCH, DELETE) 2. \u672a\u88ab\u5305\u542b\u5728`operationlog_action_exclude`\u4e2d\u7684action 3. action \u4e3a create, update, partial_update \u6216 destroy \u81ea\u5b9a\u4e49action\u9700\u8981\u81ea\u5df1\u521b\u5efaoperation_log \"\"\" operationlog_action_exclude = [] operationlog_domain_field : str = None def initial ( self , request , * args , ** kwargs ): self . operation_logs = [] # noqa super () . initial ( request , * args , ** kwargs ) # noqa def _get_view_method ( self , request ): \"\"\"Get view method.\"\"\" if hasattr ( self , \"action\" ): return self . action or None return request . method . lower () @staticmethod def _get_user ( request ): \"\"\"Get user.\"\"\" user = request . user if user . is_anonymous : return None return user def _get_action_name ( self , serializer ) -> str : \"\"\" \u83b7\u53d6\u52a8\u4f5c\u540d\u79f0 \"\"\" if self . action == \"create\" : # noqa return \"\u65b0\u589e\" elif self . action in ( \"update\" , \"partial_update\" ): # noqa return \"\u7f16\u8f91\" elif self . action == \"destroy\" : # noqa return \"\u5220\u9664\" if ( self . _get_action_flag ( self . request ) == CHANGE and \"action\" in serializer . fields ): if isinstance ( serializer . fields [ \"action\" ], serializers . ChoiceField ): action_choices = serializer . fields [ \"action\" ] . choices return action_choices . get ( serializer . validated_data [ \"action\" ]) return getattr ( self , self . action ) . kwargs [ \"name\" ] # noqa @staticmethod def _get_action_flag ( request ) -> int : if request . method == \"POST\" : return ADDITION elif request . method in ( \"PUT\" , \"PATCH\" ): return CHANGE elif request . method == \"DELETE\" : return DELETION def perform_create ( self , serializer ): super () . perform_create ( serializer ) # noqa request = self . request # noqa if self . should_log ( request ): operation_log = self . _initial_log ( request , serializer . instance , new_message = flatten_dict ( serializer . validated_data ), ) self . operation_logs . append ( operation_log ) def perform_update ( self , serializer ): request = self . request # noqa if self . should_log ( request ): change_message = serializer_data_diff ( serializer ) operation_log = self . _initial_log ( request , serializer . instance , change_message = change_message , serializer = serializer , ) self . operation_logs . append ( operation_log ) super () . perform_update ( serializer ) # noqa def perform_destroy ( self , instance ): request = self . request # noqa if self . should_log ( request ): operation_log = self . _initial_log ( request , instance ) self . operation_logs . append ( operation_log ) super () . perform_destroy ( instance ) # noqa def get_excluded_log_fields ( self , request ) -> list : \"\"\" \u83b7\u53d6\u65e5\u5fd7\u6392\u9664\u5b57\u6bb5 \u4e3b\u8868\u5b57\u6bb5 key1, key2 ForeignKey key3.key31, key4.key41 OneToMany key5[].key51, key5[].key51 :param request: :return: [\"key1\", \"key2\", \"key3.key31\", \"key4.key41\", \"key5[].key51\", \"key5[].key52\"] \"\"\" return [] @action ( detail = True , name = \"\u64cd\u4f5c\u65e5\u5fd7\" , serializer_class = OperationLogEntrySerializer , ) def operationlogs ( self , request , pk ): \"\"\" \u83b7\u53d6\u8be5\u8d44\u6e90\u64cd\u4f5c\u65e5\u5fd7\u63a5\u53e3 :param request: :param pk: \u4e3b\u952e :return: \"\"\" excluded_fields = self . get_excluded_log_fields ( request ) queryset = OperationLogEntry . objects . select_related ( \"user\" , \"content_type\" , \"domain_content_type\" ) . filter ( domain_object_id = pk , domain_content_type = ContentType . objects . get_for_model ( self . queryset . model ), ) # noqa queryset = self . filter_queryset ( queryset ) # noqa page = self . paginate_queryset ( queryset ) # noqa if page is not None : serializer = self . get_serializer ( page , many = True ) # noqa return self . get_paginated_response ( serializer . data ) # noqa if excluded_fields : formatted_excludes_fields = format_excluded_fields ( excluded_fields ) for q in queryset : q . changed_message = clean_excluded_fields ( q . changed_message , formatted_excludes_fields [ 0 ], formatted_excludes_fields [ 1 ], ) serializer = self . get_serializer ( queryset , many = True ) # noqa return Response ( serializer . data ) def should_log ( self , request ) -> bool : \"\"\" \u662f\u5426\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7, \u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u63a7\u5236 :param request: :return: \"\"\" return ( request . method . upper () in ( \"POST\" , \"PUT\" , \"PATCH\" , \"DELETE\" ) and self . action not in self . operationlog_action_exclude # noqa ) def _initial_log ( self , request , instance , old_message = None , new_message = None , change_message = None , serializer = None , ) -> OperationLogEntry : if change_message is None and old_message and new_message and serializer : change_message = [ serializer_changed_data_diff ( old_message , new_message , serializer ) ] action_flag = self . _get_action_flag ( request ) if change_message : change_message = clean_data ( change_message ) else : if action_flag == ADDITION : change_message = [{ \"added\" : []}] elif action_flag == DELETION : change_message = [{ \"deleted\" : []}] operation_log = OperationLogEntry ( user = request . user , action = self . action , # noqa action_name = self . _get_action_name ( serializer ), action_flag = action_flag , content_type = ContentType . objects . get_for_model ( instance ), object_id = instance . pk , object_repr = ContentType . objects . get_for_model ( instance ) . name , domain_content_type = ContentType . objects . get_for_model ( instance ), domain_object_id = instance . pk , change_message = change_message or [], ) if self . operationlog_domain_field : attrs = self . operationlog_domain_field . split ( \"__\" ) obj = instance for attr in attrs : obj = getattr ( obj , attr ) if not isinstance ( obj , Model ): raise ValueError ( \"'operationlog_domain_field' must refer to a model!\" ) operation_log . domain_content_type = ContentType . objects . get_for_model ( obj ) operation_log . domain_object_id = obj . pk operation_log . object_repr = ( ContentType . objects . get_for_model ( obj ) . name ,) return operation_log def finalize_response ( self , request , response , * args , ** kwargs ): if hasattr ( self , \"operation_logs\" ) and not getattr ( response , \"exception\" , False ): operation_logs_pre_save . send ( sender = \"operation_logs_pre_save\" , request = request , operation_logs = self . operation_logs , ) if getattr ( settings , \"DRF_OPERATION_LOG_SAVE_DATABASE\" , True ): OperationLogEntry . objects . bulk_create ( self . operation_logs ) self . operation_logs . clear () return super () . finalize_response ( request , response , * args , ** kwargs ) # noqa get_excluded_log_fields ( request ) \u00b6 \u83b7\u53d6\u65e5\u5fd7\u6392\u9664\u5b57\u6bb5 \u4e3b\u8868\u5b57\u6bb5 key1, key2 ForeignKey key3.key31, key4.key41 OneToMany key5[].key51, key5[].key51 :param request: :return: [\"key1\", \"key2\", \"key3.key31\", \"key4.key41\", \"key5[].key51\", \"key5[].key52\"] Source code in drf_operation_log/mixins.py 126 127 128 129 130 131 132 133 134 135 136 137 def get_excluded_log_fields ( self , request ) -> list : \"\"\" \u83b7\u53d6\u65e5\u5fd7\u6392\u9664\u5b57\u6bb5 \u4e3b\u8868\u5b57\u6bb5 key1, key2 ForeignKey key3.key31, key4.key41 OneToMany key5[].key51, key5[].key51 :param request: :return: [\"key1\", \"key2\", \"key3.key31\", \"key4.key41\", \"key5[].key51\", \"key5[].key52\"] \"\"\" return [] operationlogs ( request , pk ) \u00b6 \u83b7\u53d6\u8be5\u8d44\u6e90\u64cd\u4f5c\u65e5\u5fd7\u63a5\u53e3 :param request: :param pk: \u4e3b\u952e :return: Source code in drf_operation_log/mixins.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 @action ( detail = True , name = \"\u64cd\u4f5c\u65e5\u5fd7\" , serializer_class = OperationLogEntrySerializer , ) def operationlogs ( self , request , pk ): \"\"\" \u83b7\u53d6\u8be5\u8d44\u6e90\u64cd\u4f5c\u65e5\u5fd7\u63a5\u53e3 :param request: :param pk: \u4e3b\u952e :return: \"\"\" excluded_fields = self . get_excluded_log_fields ( request ) queryset = OperationLogEntry . objects . select_related ( \"user\" , \"content_type\" , \"domain_content_type\" ) . filter ( domain_object_id = pk , domain_content_type = ContentType . objects . get_for_model ( self . queryset . model ), ) # noqa queryset = self . filter_queryset ( queryset ) # noqa page = self . paginate_queryset ( queryset ) # noqa if page is not None : serializer = self . get_serializer ( page , many = True ) # noqa return self . get_paginated_response ( serializer . data ) # noqa if excluded_fields : formatted_excludes_fields = format_excluded_fields ( excluded_fields ) for q in queryset : q . changed_message = clean_excluded_fields ( q . changed_message , formatted_excludes_fields [ 0 ], formatted_excludes_fields [ 1 ], ) serializer = self . get_serializer ( queryset , many = True ) # noqa return Response ( serializer . data ) should_log ( request ) \u00b6 \u662f\u5426\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7, \u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u63a7\u5236 :param request: :return: Source code in drf_operation_log/mixins.py 177 178 179 180 181 182 183 184 185 186 def should_log ( self , request ) -> bool : \"\"\" \u662f\u5426\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7, \u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u63a7\u5236 :param request: :return: \"\"\" return ( request . method . upper () in ( \"POST\" , \"PUT\" , \"PATCH\" , \"DELETE\" ) and self . action not in self . operationlog_action_exclude # noqa )","title":"Modules"},{"location":"api/#drf_operation_log.models.OperationLogEntry","text":"Bases: models . Model Source code in drf_operation_log/models.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 class OperationLogEntry ( models . Model ): action_time = models . DateTimeField ( _ ( \"\u64cd\u4f5c\u65f6\u95f4\" ), default = timezone . now , db_index = True , editable = False , ) user = models . ForeignKey ( settings . AUTH_USER_MODEL , models . CASCADE , verbose_name = _ ( \"\u7528\u6237\" ), ) content_type = models . ForeignKey ( ContentType , models . SET_NULL , verbose_name = _ ( \"\u64cd\u4f5c\u5bf9\u8c61\" ), related_name = \"+\" , blank = True , null = True , ) object_id = models . TextField ( _ ( \"\u5bf9\u8c61ID\" ), blank = True , null = True ) object_repr = models . CharField ( _ ( \"\u64cd\u4f5c\u5bf9\u8c61\" ), max_length = 128 ) domain_content_type = models . ForeignKey ( ContentType , models . SET_NULL , verbose_name = _ ( \"\u540c\u8303\u56f4\u64cd\u4f5c\u5bf9\u8c61\" ), related_name = \"+\" , blank = True , null = True , ) domain_object_id = models . TextField ( _ ( \"\u540c\u8303\u56f4\u5bf9\u8c61ID\" ), blank = True , null = True ) action = models . CharField ( _ ( \"\u52a8\u4f5c\" ), max_length = 32 ) action_name = models . CharField ( _ ( \"\u52a8\u4f5c\u540d\u79f0\" ), max_length = 32 ) action_flag = models . PositiveSmallIntegerField ( _ ( \"\u64cd\u4f5c\u7c7b\u578b\" ), choices = ACTION_FLAG_CHOICES ) change_message = models . JSONField ( _ ( \"\u5dee\u5f02\u4fe1\u606f\" ), blank = True , default = dict , encoder = JSONEncoder ) extra = models . JSONField ( _ ( \"\u5176\u4ed6\u4fe1\u606f\" ), blank = True , null = True ) objects = OperationLogEntryManager () class Meta : verbose_name = verbose_name_plural = _ ( \"\u64cd\u4f5c\u65e5\u5fd7\" ) db_table = \"drf_operation_log\" ordering = [ \"-action_time\" ] index_together = ( \"content_type\" , \"object_id\" ) def __repr__ ( self ): return str ( self . action_time ) def __str__ ( self ): if self . is_addition (): return gettext ( \"\u65b0\u589e \u201c %(object)s \u201d.\" ) % { \"object\" : self . object_repr } elif self . is_change (): return gettext ( \"\u4fee\u6539 \u201c %(object)s \u201d \u2014 %(changes)s \" ) % { \"object\" : self . object_repr , \"changes\" : self . get_change_message (), } elif self . is_deletion (): return gettext ( \"\u5220\u9664 \u201c %(object)s .\u201d\" ) % { \"object\" : self . object_repr } return gettext ( \"LogEntry Object\" ) def is_addition ( self ): return self . action_flag == ADDITION def is_change ( self ): return self . action_flag == CHANGE def is_deletion ( self ): return self . action_flag == DELETION def get_change_message ( self ): \"\"\" If self.change_message is a JSON structure, interpret it as a change string, properly translated. \"\"\" # if self.is_addition(): # return [f\"\u65b0\u589e {self.object_repr}\"] # elif self.is_deletion(): # return [f\"\u5220\u9664 {self.object_repr}\"] # elif not self.change_message: # return [\"\u672a\u66f4\u6539\"] # ret = [] # for field_name, (old_value, new_value) in self.change_message.items(): # old_value = \"\" if old_value is None else old_value # new_value = \"\" if new_value is None else new_value # message = f\"\u4fee\u6539 {field_name}\uff0c \u65e7\u503c\u201c{old_value}\u201d\uff0c\u65b0\u503c\u201c{new_value}\u201d\" # ret.append(message) return self . change_message def get_edited_object ( self ): \"\"\"Return the edited object represented by this log entry.\"\"\" return self . content_type . get_object_for_this_type ( pk = self . object_id ) def get_operation_url ( self ): \"\"\" Return the admin URL to edit the object represented by this log entry. \"\"\" if self . content_type and self . object_id : url_name = \"operationlogs-list\" try : url = reverse ( url_name ) return ( f \" { url } ?content_type= { self . content_type . pk } \" \"&object_id= {self.object_id} \" ) except NoReverseMatch : pass return None","title":"OperationLogEntry"},{"location":"api/#drf_operation_log.models.OperationLogEntry.get_change_message","text":"If self.change_message is a JSON structure, interpret it as a change string, properly translated. Source code in drf_operation_log/models.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def get_change_message ( self ): \"\"\" If self.change_message is a JSON structure, interpret it as a change string, properly translated. \"\"\" # if self.is_addition(): # return [f\"\u65b0\u589e {self.object_repr}\"] # elif self.is_deletion(): # return [f\"\u5220\u9664 {self.object_repr}\"] # elif not self.change_message: # return [\"\u672a\u66f4\u6539\"] # ret = [] # for field_name, (old_value, new_value) in self.change_message.items(): # old_value = \"\" if old_value is None else old_value # new_value = \"\" if new_value is None else new_value # message = f\"\u4fee\u6539 {field_name}\uff0c \u65e7\u503c\u201c{old_value}\u201d\uff0c\u65b0\u503c\u201c{new_value}\u201d\" # ret.append(message) return self . change_message","title":"get_change_message()"},{"location":"api/#drf_operation_log.models.OperationLogEntry.get_edited_object","text":"Return the edited object represented by this log entry. Source code in drf_operation_log/models.py 146 147 148 def get_edited_object ( self ): \"\"\"Return the edited object represented by this log entry.\"\"\" return self . content_type . get_object_for_this_type ( pk = self . object_id )","title":"get_edited_object()"},{"location":"api/#drf_operation_log.models.OperationLogEntry.get_operation_url","text":"Return the admin URL to edit the object represented by this log entry. Source code in drf_operation_log/models.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def get_operation_url ( self ): \"\"\" Return the admin URL to edit the object represented by this log entry. \"\"\" if self . content_type and self . object_id : url_name = \"operationlogs-list\" try : url = reverse ( url_name ) return ( f \" { url } ?content_type= { self . content_type . pk } \" \"&object_id= {self.object_id} \" ) except NoReverseMatch : pass return None","title":"get_operation_url()"},{"location":"api/#drf_operation_log.mixins.OperationLogMixin","text":"DRF \u64cd\u4f5c\u65e5\u5fd7Mixin \u5fc5\u987b\u540c\u65f6\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u8981\u6c42\u7684\u64cd\u4f5c\u624d\u4f1a\u8bb0\u5f55 1. \u5199\u64cd\u4f5c(POST, PUT, PATCH, DELETE) 2. \u672a\u88ab\u5305\u542b\u5728 operationlog_action_exclude \u4e2d\u7684action 3. action \u4e3a create, update, partial_update \u6216 destroy \u81ea\u5b9a\u4e49action\u9700\u8981\u81ea\u5df1\u521b\u5efaoperation_log Source code in drf_operation_log/mixins.pyclass OperationLogMixin : \"\"\" DRF \u64cd\u4f5c\u65e5\u5fd7Mixin \u5fc5\u987b\u540c\u65f6\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u8981\u6c42\u7684\u64cd\u4f5c\u624d\u4f1a\u8bb0\u5f55 1. \u5199\u64cd\u4f5c(POST, PUT, PATCH, DELETE) 2. \u672a\u88ab\u5305\u542b\u5728`operationlog_action_exclude`\u4e2d\u7684action 3. action \u4e3a create, update, partial_update \u6216 destroy \u81ea\u5b9a\u4e49action\u9700\u8981\u81ea\u5df1\u521b\u5efaoperation_log \"\"\" operationlog_action_exclude = [] operationlog_domain_field : str = None def initial ( self , request , * args , ** kwargs ): self . operation_logs = [] # noqa super () . initial ( request , * args , ** kwargs ) # noqa def _get_view_method ( self , request ): \"\"\"Get view method.\"\"\" if hasattr ( self , \"action\" ): return self . action or None return request . method . lower () @staticmethod def _get_user ( request ): \"\"\"Get user.\"\"\" user = request . user if user . is_anonymous : return None return user def _get_action_name ( self , serializer ) -> str : \"\"\" \u83b7\u53d6\u52a8\u4f5c\u540d\u79f0 \"\"\" if self . action == \"create\" : # noqa return \"\u65b0\u589e\" elif self . action in ( \"update\" , \"partial_update\" ): # noqa return \"\u7f16\u8f91\" elif self . action == \"destroy\" : # noqa return \"\u5220\u9664\" if ( self . _get_action_flag ( self . request ) == CHANGE and \"action\" in serializer . fields ): if isinstance ( serializer . fields [ \"action\" ], serializers . ChoiceField ): action_choices = serializer . fields [ \"action\" ] . choices return action_choices . get ( serializer . validated_data [ \"action\" ]) return getattr ( self , self . action ) . kwargs [ \"name\" ] # noqa @staticmethod def _get_action_flag ( request ) -> int : if request . method == \"POST\" : return ADDITION elif request . method in ( \"PUT\" , \"PATCH\" ): return CHANGE elif request . method == \"DELETE\" : return DELETION def perform_create ( self , serializer ): super () . perform_create ( serializer ) # noqa request = self . request # noqa if self . should_log ( request ): operation_log = self . _initial_log ( request , serializer . instance , new_message = flatten_dict ( serializer . validated_data ), ) self . operation_logs . append ( operation_log ) def perform_update ( self , serializer ): request = self . request # noqa if self . should_log ( request ): change_message = serializer_data_diff ( serializer ) operation_log = self . _initial_log ( request , serializer . instance , change_message = change_message , serializer = serializer , ) self . operation_logs . append ( operation_log ) super () . perform_update ( serializer ) # noqa def perform_destroy ( self , instance ): request = self . request # noqa if self . should_log ( request ): operation_log = self . _initial_log ( request , instance ) self . operation_logs . append ( operation_log ) super () . perform_destroy ( instance ) # noqa def get_excluded_log_fields ( self , request ) -> list : \"\"\" \u83b7\u53d6\u65e5\u5fd7\u6392\u9664\u5b57\u6bb5 \u4e3b\u8868\u5b57\u6bb5 key1, key2 ForeignKey key3.key31, key4.key41 OneToMany key5[].key51, key5[].key51 :param request: :return: [\"key1\", \"key2\", \"key3.key31\", \"key4.key41\", \"key5[].key51\", \"key5[].key52\"] \"\"\" return [] @action ( detail = True , name = \"\u64cd\u4f5c\u65e5\u5fd7\" , serializer_class = OperationLogEntrySerializer , ) def operationlogs ( self , request , pk ): \"\"\" \u83b7\u53d6\u8be5\u8d44\u6e90\u64cd\u4f5c\u65e5\u5fd7\u63a5\u53e3 :param request: :param pk: \u4e3b\u952e :return: \"\"\" excluded_fields = self . get_excluded_log_fields ( request ) queryset = OperationLogEntry . objects . select_related ( \"user\" , \"content_type\" , \"domain_content_type\" ) . filter ( domain_object_id = pk , domain_content_type = ContentType . objects . get_for_model ( self . queryset . model ), ) # noqa queryset = self . filter_queryset ( queryset ) # noqa page = self . paginate_queryset ( queryset ) # noqa if page is not None : serializer = self . get_serializer ( page , many = True ) # noqa return self . get_paginated_response ( serializer . data ) # noqa if excluded_fields : formatted_excludes_fields = format_excluded_fields ( excluded_fields ) for q in queryset : q . changed_message = clean_excluded_fields ( q . changed_message , formatted_excludes_fields [ 0 ], formatted_excludes_fields [ 1 ], ) serializer = self . get_serializer ( queryset , many = True ) # noqa return Response ( serializer . data ) def should_log ( self , request ) -> bool : \"\"\" \u662f\u5426\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7, \u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u63a7\u5236 :param request: :return: \"\"\" return ( request . method . upper () in ( \"POST\" , \"PUT\" , \"PATCH\" , \"DELETE\" ) and self . action not in self . operationlog_action_exclude # noqa ) def _initial_log ( self , request , instance , old_message = None , new_message = None , change_message = None , serializer = None , ) -> OperationLogEntry : if change_message is None and old_message and new_message and serializer : change_message = [ serializer_changed_data_diff ( old_message , new_message , serializer ) ] action_flag = self . _get_action_flag ( request ) if change_message : change_message = clean_data ( change_message ) else : if action_flag == ADDITION : change_message = [{ \"added\" : []}] elif action_flag == DELETION : change_message = [{ \"deleted\" : []}] operation_log = OperationLogEntry ( user = request . user , action = self . action , # noqa action_name = self . _get_action_name ( serializer ), action_flag = action_flag , content_type = ContentType . objects . get_for_model ( instance ), object_id = instance . pk , object_repr = ContentType . objects . get_for_model ( instance ) . name , domain_content_type = ContentType . objects . get_for_model ( instance ), domain_object_id = instance . pk , change_message = change_message or [], ) if self . operationlog_domain_field : attrs = self . operationlog_domain_field . split ( \"__\" ) obj = instance for attr in attrs : obj = getattr ( obj , attr ) if not isinstance ( obj , Model ): raise ValueError ( \"'operationlog_domain_field' must refer to a model!\" ) operation_log . domain_content_type = ContentType . objects . get_for_model ( obj ) operation_log . domain_object_id = obj . pk operation_log . object_repr = ( ContentType . objects . get_for_model ( obj ) . name ,) return operation_log def finalize_response ( self , request , response , * args , ** kwargs ): if hasattr ( self , \"operation_logs\" ) and not getattr ( response , \"exception\" , False ): operation_logs_pre_save . send ( sender = \"operation_logs_pre_save\" , request = request , operation_logs = self . operation_logs , ) if getattr ( settings , \"DRF_OPERATION_LOG_SAVE_DATABASE\" , True ): OperationLogEntry . objects . bulk_create ( self . operation_logs ) self . operation_logs . clear () return super () . finalize_response ( request , response , * args , ** kwargs ) # noqa","title":"OperationLogMixin"},{"location":"api/#drf_operation_log.mixins.OperationLogMixin.get_excluded_log_fields","text":"\u83b7\u53d6\u65e5\u5fd7\u6392\u9664\u5b57\u6bb5 \u4e3b\u8868\u5b57\u6bb5 key1, key2 ForeignKey key3.key31, key4.key41 OneToMany key5[].key51, key5[].key51 :param request: :return: [\"key1\", \"key2\", \"key3.key31\", \"key4.key41\", \"key5[].key51\", \"key5[].key52\"] Source code in drf_operation_log/mixins.py 126 127 128 129 130 131 132 133 134 135 136 137 def get_excluded_log_fields ( self , request ) -> list : \"\"\" \u83b7\u53d6\u65e5\u5fd7\u6392\u9664\u5b57\u6bb5 \u4e3b\u8868\u5b57\u6bb5 key1, key2 ForeignKey key3.key31, key4.key41 OneToMany key5[].key51, key5[].key51 :param request: :return: [\"key1\", \"key2\", \"key3.key31\", \"key4.key41\", \"key5[].key51\", \"key5[].key52\"] \"\"\" return []","title":"get_excluded_log_fields()"},{"location":"api/#drf_operation_log.mixins.OperationLogMixin.operationlogs","text":"\u83b7\u53d6\u8be5\u8d44\u6e90\u64cd\u4f5c\u65e5\u5fd7\u63a5\u53e3 :param request: :param pk: \u4e3b\u952e :return: Source code in drf_operation_log/mixins.py 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 @action ( detail = True , name = \"\u64cd\u4f5c\u65e5\u5fd7\" , serializer_class = OperationLogEntrySerializer , ) def operationlogs ( self , request , pk ): \"\"\" \u83b7\u53d6\u8be5\u8d44\u6e90\u64cd\u4f5c\u65e5\u5fd7\u63a5\u53e3 :param request: :param pk: \u4e3b\u952e :return: \"\"\" excluded_fields = self . get_excluded_log_fields ( request ) queryset = OperationLogEntry . objects . select_related ( \"user\" , \"content_type\" , \"domain_content_type\" ) . filter ( domain_object_id = pk , domain_content_type = ContentType . objects . get_for_model ( self . queryset . model ), ) # noqa queryset = self . filter_queryset ( queryset ) # noqa page = self . paginate_queryset ( queryset ) # noqa if page is not None : serializer = self . get_serializer ( page , many = True ) # noqa return self . get_paginated_response ( serializer . data ) # noqa if excluded_fields : formatted_excludes_fields = format_excluded_fields ( excluded_fields ) for q in queryset : q . changed_message = clean_excluded_fields ( q . changed_message , formatted_excludes_fields [ 0 ], formatted_excludes_fields [ 1 ], ) serializer = self . get_serializer ( queryset , many = True ) # noqa return Response ( serializer . data )","title":"operationlogs()"},{"location":"api/#drf_operation_log.mixins.OperationLogMixin.should_log","text":"\u662f\u5426\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7, \u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u63a7\u5236 :param request: :return: Source code in drf_operation_log/mixins.py 177 178 179 180 181 182 183 184 185 186 def should_log ( self , request ) -> bool : \"\"\" \u662f\u5426\u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7, \u53ef\u4ee5\u8986\u76d6\u6b64\u65b9\u6cd5\u6765\u81ea\u5b9a\u4e49\u63a7\u5236 :param request: :return: \"\"\" return ( request . method . upper () in ( \"POST\" , \"PUT\" , \"PATCH\" , \"DELETE\" ) and self . action not in self . operationlog_action_exclude # noqa )","title":"should_log()"},{"location":"changelog/","text":"v1.0.1 (2022-11-18) \u00b6 Fix \u00b6 fix bug v1.0.0 (2022-11-17) \u00b6 BREAKING CHANGE \u00b6 \u8c03\u6574log:change_message\u7ed3\u6784 Refactor \u00b6 \u8c03\u6574log\u7ed3\u6784 v0.6.0 (2022-10-24) \u00b6 Feat \u00b6 add support for searching by and v0.5.3 (2022-10-24) \u00b6 Fix \u00b6 extract action name from serializer v0.5.2 (2022-10-24) \u00b6 Refactor \u00b6 support filter operation v0.5.1 (2022-10-24) \u00b6 Fix \u00b6 make compatible with Django 4.0 v0.5.0 (2022-10-24) \u00b6 Feat \u00b6 add pre save signal Fix \u00b6 add migration files","title":"Changelog"},{"location":"changelog/#v101-2022-11-18","text":"","title":"v1.0.1 (2022-11-18)"},{"location":"changelog/#fix","text":"fix bug","title":"Fix"},{"location":"changelog/#v100-2022-11-17","text":"","title":"v1.0.0 (2022-11-17)"},{"location":"changelog/#breaking-change","text":"\u8c03\u6574log:change_message\u7ed3\u6784","title":"BREAKING CHANGE"},{"location":"changelog/#refactor","text":"\u8c03\u6574log\u7ed3\u6784","title":"Refactor"},{"location":"changelog/#v060-2022-10-24","text":"","title":"v0.6.0 (2022-10-24)"},{"location":"changelog/#feat","text":"add support for searching by and","title":"Feat"},{"location":"changelog/#v053-2022-10-24","text":"","title":"v0.5.3 (2022-10-24)"},{"location":"changelog/#fix_1","text":"extract action name from serializer","title":"Fix"},{"location":"changelog/#v052-2022-10-24","text":"","title":"v0.5.2 (2022-10-24)"},{"location":"changelog/#refactor_1","text":"support filter operation","title":"Refactor"},{"location":"changelog/#v051-2022-10-24","text":"","title":"v0.5.1 (2022-10-24)"},{"location":"changelog/#fix_2","text":"make compatible with Django 4.0","title":"Fix"},{"location":"changelog/#v050-2022-10-24","text":"","title":"v0.5.0 (2022-10-24)"},{"location":"changelog/#feat_1","text":"add pre save signal","title":"Feat"},{"location":"changelog/#fix_3","text":"add migration files","title":"Fix"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/wccdev/drf-operation-log/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 drf-operation-log could always use more documentation, whether as part of the official drf-operation-log docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/wccdev/drf-operation-log/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up drf-operation-log for local development. Fork the drf-operation-log repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/drf-operation-log.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install --with test,doc,dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9 and 3.10. Check https://github.com/wccdev/drf-operation-log/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_drf_operation_log.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/wccdev/drf-operation-log/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"drf-operation-log could always use more documentation, whether as part of the official drf-operation-log docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/wccdev/drf-operation-log/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up drf-operation-log for local development. Fork the drf-operation-log repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/drf-operation-log.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install --with test,doc,dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9 and 3.10. Check https://github.com/wccdev/drf-operation-log/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_drf_operation_log.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install drf-operation-log, run this command in your terminal: $ pip install drf-operation-log This is the preferred method to install drf-operation-log, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for drf-operation-log can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/wccdev/drf-operation-log Or download the tarball : $ curl -OJL https://github.com/wccdev/drf-operation-log/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install drf-operation-log, run this command in your terminal: $ pip install drf-operation-log This is the preferred method to install drf-operation-log, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for drf-operation-log can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/wccdev/drf-operation-log Or download the tarball : $ curl -OJL https://github.com/wccdev/drf-operation-log/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use drf-operation-log in a project import drf_operation_log","title":"Usage"},{"location":"usage/#usage","text":"To use drf-operation-log in a project import drf_operation_log","title":"Usage"}]}